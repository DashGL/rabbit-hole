---
import Story from "@layouts/Story.astro";
import { Image } from "astro:assets";
import scene from "@assets/scenes/T1_Start.jpeg";
import end from "@assets/scenes/T1_End.jpeg";

import title from "@assets/scenes/brickout-title.png";
import game from "@assets/scenes/brickout-game.png";
import lose from "@assets/scenes/brickout-lose.png";
import over from "@assets/scenes/brickout-over.png";
import complete from "@assets/scenes/brickout-complete.png";

import Dashie from "@components/Dashie.astro";
import Kion from "@components/Kion.astro";
---

<Story>
    <Image
        class="rounded-lg"
        src={scene}
        alt="Kion falls into the Digital World"
    />
    <h1>Brickout</h1>

    <h2>Introduction</h2>
    <p>
        Dashie: <Dashie>Where did this come from?</Dashie>
    </p>
    <p>
        Kion: <Kion>Omg: We're locked in here!!</Kion>
    </p>

    <h2>Concept</h2>
    <Image
        class="rounded-lg"
        src={title}
        alt="Title screen for brickout game with SDL on linux"
    />

    <Image
        class="rounded-lg"
        src={game}
        alt="Gameplay loop for brickout game with SDL on linux"
    />

    <Image
        class="rounded-lg"
        src={lose}
        alt="Option 1 for when Kion loses and gets trapped"
    />

    <Image
        class="rounded-lg"
        src={over}
        alt="Option 2 for when Kion loses and gets trapped"
    />

    <Image
        class="rounded-lg"
        src={complete}
        alt="Complete screen for when Kion loses and gets trapped"
    />

    <h2>Program</h2>
    <h3>Step 1: Setting Up the Development Environment</h3>

    <p>
        Installing the necessary tools and libraries for Raspberry Pi
        development. Creating a new project directory for your Brickout game.
    </p>
    <h3>Step 2: Configuring SDL and OpenGL</h3>

    <p>
        Initializing SDL and setting up an OpenGL context for rendering.
        Creating a window for the game.
    </p>
    <h3>Step 3: Creating the Title Screen</h3>
    <p>
        Designing the title screen with text and graphics. Handling user input
        to start the game.
    </p>
    <h3>Step 4: Implementing the Game Loop</h3>
    <p>
        Setting up the main game loop for controlling gameplay. Handling events,
        updating game logic, and rendering the game.
    </p>
    <h3>Step 5: Building the Paddle</h3>
    <p>
        Creating a paddle object that the player can control. Implementing
        movement and collision detection.
    </p>
    <h3>Step 6: Spawning the Ball</h3>
    <p>
        Generating the ball that bounces around the screen. Applying initial
        velocity and collision detection.
    </p>
    <h3>Step 7: Designing the Bricks</h3>
    <p>
        Creating a grid of bricks for the player to break. Managing different
        types of bricks and their states.
    </p>
    <h3>Step 8: Handling Collisions</h3>
    <p>
        Implementing collision detection between the ball, paddle, and bricks.
        Updating game state based on collisions.
    </p>
    <h3>Step 9: Adding Scoring and Lives</h3>
    <p>
        Keeping track of the player's score and remaining lives. Displaying this
        information on the screen.
    </p>
    <h3>Step 10: Implementing Game Over</h3>
    <p>
        Detecting when the player has no lives left. Displaying a game over
        screen and allowing the player to restart.
    </p>
    <h3>Step 11: Adding Power-Ups (Optional)</h3>
    <p>
        Implementing power-up items that enhance gameplay. Modifying paddle,
        ball, or brick behavior with power-ups.
    </p>
    <h3>Step 12: Creating a Success Screen (Optional)</h3>
    <p>
        Designing a success screen for when the player completes all levels.
        Allowing the player to restart or return to the title screen.
    </p>
    <h3>Step 13: Sound and Music (Optional)</h3>
    <p>
        Integrating sound effects and background music to enhance the gaming
        experience. Implementing audio control for different game events.
    </p>
    <h3>Step 14: Optimizing for Raspberry Pi</h3>
    <p>
        Making performance optimizations to ensure smooth gameplay on the
        Raspberry Pi. Adjusting the display resolution and other settings.
    </p>
    <h3>Step 15: Final Testing and Deployment</h3>
    <p>
        Thoroughly testing the game on the Raspberry Pi. Preparing the game for
        distribution and deployment.
    </p>

    <h2>Conclusion</h2>

    <Image
        class="rounded-lg"
        src={end}
        alt="Kion falls into the Digital World"
    />
</Story>
